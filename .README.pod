=head1 Text-CSV-Hashify

Turn a CSV file into a Perl hash

=head2 Description

The Comma-Separated-Value ('CSV') format is the most common way to store
spreadsheets or the output of relational database queries in plain-text
format.  However, since commas (or other designated field-separator
characters) may be embedded within data entries, the parsing of delimited
records is non-trivial.  Fortunately, in Perl this parsing is well handled by
CPAN distribution L<Text::CSV|http://search.cpan.org/dist/Text-CSV/>.  This
permits us to address more specific data manipulation problems by building
modules on top of F<Text::CSV>.

F<Text::CSV::Hashify> is designed for the case where you simply want to turn a
CSV file into a Perl hash.  In particular, it is designed for the case where:

=over 4

=item *

the CSV file's first record is a list of fields in the
ancestral database table; and

=item *

one field (column) functions as a primary key, I<i.e.,> each record's entry in
that field is non-null and is distinct from every other record's entry
therein.

=back

F<Text::CSV::Hashify> turns that kind of CSV file into one big hash of hashes.

F<Text::CSV::Hashify> can handle less typical cases; please consult the
documentation for its other functionalities.  F<Text::CSV::Hashify> can now
take gzip-compressed (F<.gz>) files as input as well as uncompressed files.

=head2 Installation

To install:

    perl Makefile.PL
    make
    make test
    make install

If you are on a windows box you should use 'nmake' rather than 'make'.

=cut
